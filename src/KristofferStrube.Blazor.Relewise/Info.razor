&nbsp;<span class="round light" @ref=reference aria-describedby="tooltip" @onpointerover=Activate @onpointerout=Deactivate>?</span>

<span style="width:0;height:0;overflow:hidden;display: inline-block;">
    <span class="popper" @ref=tooltip role="tooltip" @onpointerover=Activate @onpointerout=DeactivateImmediately>
        @ChildContent
    </span>
</span>

@code {
    private bool active;
    private ElementReference reference;
    private ElementReference tooltip;
    private Instance instance;

    [Inject]
    public Popper Popper { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public async Task Activate()
    {
        if (!active)
        {
            active = true;

            StateHasChanged();
            await Task.Delay(1);

            Options options = new()
                {
                    Placement = Placement.Bottom
                };
            if (instance is null)
            {
                instance = await Popper.CreatePopperAsync(reference, tooltip, options);
            }
        }
    }

    public async Task Deactivate()
    {
        if (active)
        {
            active = false;
            await Task.Delay(200);
            if (!active) // We check here again in case it was re-activated.
            {
                if (instance is not null)
                {
                    await instance.Destroy();
                    instance = null;
                }
            }
        }
    }

    public async Task DeactivateImmediately()
    {
        if (active)
        {
            active = false;
            if (instance is not null)
            {
                await instance.Destroy();
                instance = null;
            }
        }
    }
}