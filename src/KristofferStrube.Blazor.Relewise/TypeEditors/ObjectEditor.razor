@using System.Reflection
@using Humanizer
@using KristofferStrube.Blazor.Relewise.XmlSummaries
@using Microsoft.JSInterop
@using Newtonsoft.Json
@using Newtonsoft.Json.Converters
@using System.IO.Compression
@using global::Relewise.Client
@using KristofferStrube.Blazor.Popper
@typeparam T

<CascadingValue Value="HideDefaultValueProperties">

    @if (Value is null)
    {
        <div>
            <code>&lt;NULL&gt;</code>
            @if (!ReadOnly)
            {
                <text>&nbsp;</text>
                @if (derivedTypes.Count is 0)
                {
                    <button class="btn btn-outline-success btn-sm" @onclick=Create>Create new @Settings.Name(typeof(T))</button>
                }
                else
                {
                    <select @onchange=TypeDropdownChanged>
                        @foreach (Type type in derivedTypes)
                        {
                            if (type == selectedCreateType)
                            {
                                <option value="@type.Name" selected>@type.Name</option>
                            }
                            else
                            {
                                <option value="@type.Name">@type.Name</option>
                            }
                        }
                    </select>
                    <button class="btn btn-outline-success btn-sm" style="margin:2px;margin-top:0px;padding:3px;line-height:1.1" @onclick=Create>Create</button>
                }
            }
        </div>
    }
    else
    {
        <details class="box" open=@(OpenDetails || SingleLevelOpenDetails)>
            <summary @onclick="() => hasBeenOpen = true">
                @if (Value is not null && derivedTypes.Count > 0 && !ReadOnly && !OpenDetails)
                {
                    <span>&nbsp;</span>
                    <select @onchange=TypeDropdownChanged>
                        @foreach (Type type in derivedTypes)
                        {
                            if (type == selectedCreateType)
                            {
                                <option value="@type.Name" selected>@type.Name</option>
                            }
                            else
                            {
                                <option value="@type.Name">@type.Name</option>
                            }
                        }
                    </select>
                    <button class="btn btn-light btn-sm" style="margin:2px;margin-top:1px;padding:2px;line-height:1.1" @onclick=Create>Switch type</button>
                }
                else
                {
                    <i>@Settings.Name(Value is not null ? Value.GetType() : typeof(T))</i>
                }
                @if (ShowModelShareLink)
                {
                    <span style="float:right;margin-top:-2px;margin-right:4px;" @onclick:preventDefault=true @onclick="() => CopyLinkToClipboard()">
                        <svg class="bi" width="16" height="16" viewBox="-1 -1 10 10">
                            <polygon fill="transparent" stroke="white" stroke-width="1" points="0,6 2,4 4,4 4,2 6,0 8,0 8,2 6,4 4,4 4,6 2,8 0,8">
                                <title>Copy link to Model page with this object data</title>
                            </polygon>
                        </svg>
                    </span>
                }
                <span style="float:right;margin-top:-2px;margin-right:4px;" @onclick:preventDefault=true @onclick="() => CopyToClipboard()">
                    <svg class="bi" width="16" height="16" viewBox="-1 -1 10 13">
                        <polygon fill="transparent" stroke="white" stroke-width="2" points="0,12 0,2 1,1 3,1 4,0 5,0 6,1 8,1 9,2 9,12">
                            <title>Copy to clipboard as JSON</title>
                        </polygon>
                    </svg>
                </span>
                <span title="@(HideDefaultValueProperties is not true ? "Hide properties that have default values" : "Show all properties")" style="float:right;margin-top:-2px;margin-right:4px;" @onclick:preventDefault=true @onclick="() => HideDefaultValueProperties = HideDefaultValueProperties is not true">
                    @if (HideDefaultValueProperties is not true)
                    {
                        <svg class="bi" width="16" height="16" viewBox="-2 -2 12 3"><polygon stroke="white" stroke-width="2" points="0,0 10,0 10,1 0,1"></polygon></svg>
                    }
                    else
                    {
                        <svg class="bi" width="16" height="16" viewBox="-2 -2 15 15"><polygon stroke="white" stroke-width="2" points="5,5 5,0 6,0 6,5 11,5 11,6 6,6 6,11 5,11 5,6 0,6 0,5"></polygon></svg>
                    }
                </span>
            </summary>
            @if (hasBeenOpen)
            {
                <div class="two-column-grid">
                    @foreach (var property in Properties)
                    {
                        if (HideDefaultValueProperties is not true || (Value is null && emptyInstanceOfValue is null) || (Value is not null && emptyInstanceOfValue is not null && JsonConvert.SerializeObject(property.GetValue(Value)) != JsonConvert.SerializeObject(property.GetValue(emptyInstanceOfValue))))
                        {
                            <div @key=@($"{property.Name}-label")>
                                <b>@property.Name</b>
                                @if (xmlDocumentation is not null && xmlDocumentation.GetSummary(property.DeclaringType, property.Name) is { } summary)
                                {
                                    <Info>@summary</Info>
                                }
                            </div>
                            <div @key=@($"{property.Name}-value") class="object-value">
                                @if (Settings.Editors.FirstOrDefault(editor => editor.CanHandle(property.GetValue(Value) is { } actualized ? actualized.GetType() : property.PropertyType)) is { } editor)
                                {
                                    var parameters = new Dictionary<string, object>() { ["ReadOnly"] = ReadOnly, ["OpenDetails"] = OpenDetails, ["Value"] = property.GetValue(Value), ["Setter"] = (object? obj) => { property.SetValue(Value, obj); Setter(Value); } };
                                    var editorType = editor.EditorType(property.GetValue(Value) is { } actualized ? actualized.GetType() : property.PropertyType);
                                    <ErrorBoundary>
                                        <ChildContent>
                                            <DynamicComponent Type=editorType Parameters=parameters />
                                        </ChildContent>
                                        <ErrorContent>
                                            <code>Failed to initialize editor part for @Settings.Name(property.PropertyType)</code>
                                        </ErrorContent>
                                    </ErrorBoundary>
                                    @if (property.Name.Contains("Minutes") && property.PropertyType == typeof(int) && property.GetValue(Value) is int { } minutes)
                                    {
                                        <Info>@TimeSpan.FromMinutes(minutes).Humanize(4)</Info>
                                    }
                                }
                                else
                                {
                                    <code>Can't edit @Settings.Name(property.PropertyType)</code>
                                }
                            </div>
                        }
                    }
                </div>
            }
        </details>
    }
</CascadingValue>

@code {
    private bool hasBeenOpen;
    private object? emptyInstanceOfValue;
    private List<Type> derivedTypes = new();
    private Type selectedCreateType = typeof(T);
    private XmlDocumentation? xmlDocumentation;

    [Parameter]
    public bool ShowModelShareLink { get; set; } = false;

    [Parameter]
    public bool ReadOnly { get; set; } = false;

    [Parameter]
    public bool OpenDetails { get; set; } = false;

    [Parameter]
    public bool SingleLevelOpenDetails { get; set; } = false;

    [Parameter, CascadingParameter]
    public bool? HideDefaultValueProperties { get; set; }

    [Parameter]
    public bool? OverridenHideDefaultValueProperties { get; set; }

    [Parameter, EditorRequired]
    public required object? Value { get; set; }

    [Parameter, EditorRequired]
    public required Action<object?> Setter { get; set; }

    [Inject]
    public required IJSRuntime JSRuntime { get; set; }

    [Inject]
    public required NavigationManager NavigationManager { get; set; }

    [Inject]
    public required XMLDocumentationCache XMLDocumentationCache { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        xmlDocumentation = await XMLDocumentationCache.GetAsync();

        hasBeenOpen = hasBeenOpen || OpenDetails || SingleLevelOpenDetails;

        if (OverridenHideDefaultValueProperties is not null)
        {
            HideDefaultValueProperties = OverridenHideDefaultValueProperties;
        }

        var assembly = Assembly.GetAssembly(typeof(ClientBase));
        derivedTypes = assembly!
            .GetTypes()
            .Where(type => type != typeof(T) && type.IsAssignableTo(typeof(T)) && !type.IsGenericType && !type.IsAbstract)
            .ToList();

        if (derivedTypes.Count > 0 && (typeof(T).IsGenericType || typeof(T).IsAbstract))
        {
            if (Value is not null && Value.GetType() != typeof(T))
            {
                selectedCreateType = Value.GetType();
            }
            else
            {
                selectedCreateType = derivedTypes.First();
            }
        }

        Type? editedTyped = null;
        if (Value is not null)
        {
            editedTyped = Value.GetType();
        }
        else if (selectedCreateType is not null)
        {
            editedTyped = selectedCreateType;
        }
        if (editedTyped is not null)
        {
            var editor = Settings.Editors.First(e => e.CanHandle(editedTyped));
            emptyInstanceOfValue = editor.InitValue(editedTyped);
        }
    }

    private void TypeDropdownChanged(ChangeEventArgs eventArgs)
    {
        selectedCreateType = derivedTypes.First(t => t.Name == (string?)eventArgs.Value);
    }

    public void Create()
    {
        var editor = Settings.Editors.First(e => e.CanHandle(selectedCreateType));
        Value = editor.InitValue(selectedCreateType);
        emptyInstanceOfValue = editor.InitValue(selectedCreateType);
        Setter(Value);
    }

    public async Task CopyToClipboard()
    {
        var jsonSerializerSettings = new JsonSerializerSettings
            {
                TypeNameHandling = TypeNameHandling.Auto,
                NullValueHandling = NullValueHandling.Ignore,
                Formatting = Formatting.Indented
            };
        jsonSerializerSettings.Converters.Add(new StringEnumConverter());

        Type? serializedType = Value?.GetType();
        if (serializedType?.BaseType is not null)
        {
            serializedType = serializedType.BaseType;
        }

        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", JsonConvert.SerializeObject(Value, serializedType, jsonSerializerSettings));
    }

    public async Task CopyLinkToClipboard()
    {
        var jsonSerializerSettings = new JsonSerializerSettings
            {
                TypeNameHandling = TypeNameHandling.Auto,
                NullValueHandling = NullValueHandling.Ignore,
                Formatting = Formatting.None,
                Converters = [new StringEnumConverter()]
            };

        Type? serializedType = Value?.GetType();
        if (serializedType?.BaseType is not null)
        {
            serializedType = serializedType.BaseType;
        }

        string serialized = JsonConvert.SerializeObject(Value, serializedType, jsonSerializerSettings);
        Console.WriteLine(serialized);
        string compressed = ToGzip(serialized);

        string url = $"{NavigationManager.BaseUri}Models?q={Value?.GetType().Name}&o={compressed}";

        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", url);
    }

    public static string ToGzip(string value)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(value);
        using var input = new MemoryStream(bytes);
        using var output = new MemoryStream();
        using var stream = new GZipStream(output, CompressionLevel.Fastest);

        input.CopyTo(stream);

        stream.Dispose();

        var result = output.ToArray();
        return Convert.ToBase64String(result);
    }

    private IEnumerable<PropertyInfo>? Properties => Value?.GetType().GetProperties().Where(p => p.SetMethod is not null && p.GetIndexParameters() is { Length: 0 } && p.Name is not "Custom" and not "DatasetId" and not "APIKeySecret");
}