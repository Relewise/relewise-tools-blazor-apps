@page "/Recommendations"
@using KristofferStrube.Blazor.Relewise.TypeEditors
@using System.Reflection
@using System.Diagnostics
@using Newtonsoft.Json
@using Newtonsoft.Json.Converters
@using global::Relewise.Client.Requests
@using global::Relewise.Client.Requests.Recommendations
@using global::Relewise.Client.Responses
@implements IDisposable

<PageTitle>Blazor Relewise - Recommendations</PageTitle>

<h1>Recommendations</h1>
<p>Here you can get try to make some recommendations.</p>

@if (error is not null)
{
    <code>@error</code>
    <br />
    <br />
}
@if (message is not null)
{
    <span style="color:green;">@message</span>
    <br />
    <br />
}

@if (StaticDatasetStorage.ParentOrigin is null || string.IsNullOrWhiteSpace(StaticDatasetStorage.ApiKey))
{
    <p>
        First you need to insert your Server URL, Dataset Id, and API Key to connect with your dataset. You can find these at <a target="_blank" href="https://my.relewise.com/api-keys">My Relewise > API Keys</a>.
        <br />
        <small>You can't use your Master key in this application so you will have to create some separate key that can use the <code>Recommender</code>.</small>
    </p>

    <ConnectionCredentials />
}

@if (recommender is null)
{
    <button class="btn btn-success" @onclick="() => Connect()">Connect</button>
    <br />
}
<br />

<div class="input-group">
    <input @bind=SearchTerm @bind:after=Search id="search" @bind:event="oninput" class="form-control" placeholder="Search" />
    <div class="input-group-append">
        <label for="search" class="input-group-text" style="width:240px;">
            <svg class="bi" width="24" height="24" viewBox="-2 -2 14 13"><polygon fill="transparent" stroke="grey" stroke-width="1" points="12,11 6,6 5,7 2,7 0,5 0,2 2,0 5,0 7,2 7,5 6,6"></polygon></svg>
            @if (searchTime is not null)
            {
                <small style="color: green;margin-left:10px;">
                    Found @groupings.Sum(g => g.Value.Count) results in @searchTime.Value ms
                </small>
            }
        </label>
    </div>
</div>
<br />

@foreach (var group in groupings.Where(group => group.Value.Count > 0))
{
    <h2>@group.Key Recommendations</h2>
    @foreach (Type recommendation in group.Value)
    {
        <RecommendationConstructor @key=recommendation RequestType=recommendation Request=initValues[recommendation] OpenDetails=@(groupings.Sum(g => g.Value.Count) == 1) Connect=Connect ResetRecommender=ResetRecommender Recommender="recommender" />
        <br />
    }
}

@if (uncategorizedTypes.Count > 0)
{
    <h2>Uncategorized Recommendations</h2>
    @foreach (var recommendation in uncategorizedTypes)
    {
        <RecommendationConstructor RequestType=recommendation Request=initValues[recommendation] OpenDetails=@(groupings.Sum(g => g.Value.Count) == 1) Connect=Connect ResetRecommender=ResetRecommender Recommender="recommender" />
        <br />
    }
}

<br />

@code {
    private double? searchTime;
    private string? error;
    private string? message;
    private Recommender? recommender;
    private Dictionary<string, List<Type>> groupings = new();
    private Dictionary<Type, LicensedRequest> initValues = default!;

    [SupplyParameterFromQuery(Name = "q")]
    public string SearchTerm { get; set; } = "";

    [SupplyParameterFromQuery(Name = "o")]
    public string? CompressedObject { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (StaticDatasetStorage.DatasetId is not "" && !string.IsNullOrWhiteSpace(StaticDatasetStorage.ApiKey))
        {
            Connect();
        }
        StaticDatasetStorage.AuthenticationReceived += Authenticated;
    }

    private void Authenticated(object? sender, EventArgs args)
    {
        Connect();
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (SearchTerm is null)
        {
            SearchTerm = "";
        }

        if (initValues is null)
        {
            initValues = RecommendationGroupings.SelectMany(g => g.Value)
                .ToDictionary(
                    keySelector: t => t,
                    elementSelector: t => (LicensedRequest)t.GetConstructors().FirstOrDefault(c => c.GetParameters().Length is 0)?.Invoke(null)!
                );
        }

        await Search();

        if (CompressedObject is not null)
        {
            String decompressedString = await Models.FromGzipAsync(CompressedObject.Replace(" ", "+"));
            var jsonSerializerSettings = new JsonSerializerSettings
                {
                    TypeNameHandling = TypeNameHandling.Auto,
                    NullValueHandling = NullValueHandling.Ignore,
                    Formatting = Formatting.None,
                    Converters = [new StringEnumConverter()]
                };
            LicensedRequest decompressedObject = JsonConvert.DeserializeObject<LicensedRequest>(decompressedString, jsonSerializerSettings)!;
            if (groupings.SelectMany(g => g.Value).FirstOrDefault(t => t.Name == decompressedObject?.GetType().Name) is { } matchingType)
            {
                initValues[matchingType] = decompressedObject;
            }
        }
    }

    private bool Connect()
    {
        try
        {
            recommender = new Recommender(new Guid(StaticDatasetStorage.DatasetId), StaticDatasetStorage.ApiKey, StaticDatasetStorage.ServerUrl);
            message = "Successfully initialized the Recommender.";
            error = null;
            return true;
        }
        catch (Exception ex)
        {
            error = ex.Message;
            message = null;
            return false;
        }
    }

    private void ResetRecommender()
    {
        recommender = null;
        StateHasChanged();
    }

    public static Dictionary<string, List<Type>> RecommendationGroupings = new()
        {
            ["Product"] = [typeof(PopularProductsRequest),
            typeof(PersonalProductRecommendationRequest),
            typeof(PurchasedWithProductRequest),
            typeof(PurchasedWithCurrentCartRequest),
            typeof(PurchasedWithMultipleProductsRequest),
            typeof(ProductsViewedAfterViewingProductRequest),
            typeof(ProductsViewedAfterViewingContentRequest),
            typeof(RecentlyViewedProductsRequest),
            typeof(SearchTermBasedProductRecommendationRequest),
            typeof(SimilarProductsRequest),
            typeof(SortProductsRequest),
            typeof(SortVariantsRequest),
            typeof(CustomProductRecommendationRequest)],

            ["Content"] = [typeof(PopularContentsRequest),
            typeof(PersonalContentRecommendationRequest),
            typeof(ContentsViewedAfterViewingContentRequest),
            typeof(ContentsViewedAfterViewingProductRequest),
            typeof(ContentsViewedAfterViewingMultipleContentsRequest),
            typeof(ContentsViewedAfterViewingMultipleProductsRequest)],

            ["Brand"] = [typeof(PopularBrandsRecommendationRequest),
            typeof(PersonalBrandRecommendationRequest)],

            ["Product Category"] = [typeof(PopularProductCategoriesRecommendationRequest),
            typeof(PersonalProductCategoryRecommendationRequest)],

            ["Content Category"] = [typeof(PopularContentCategoriesRecommendationRequest),
            typeof(PersonalContentCategoryRecommendationRequest)],

            ["Search Term"] = [typeof(PopularSearchTermsRecommendationRequest)],

            ["Batched"] = [typeof(ProductRecommendationRequestCollection),
            typeof(ContentRecommendationRequestCollection)]
        };

    private static List<Type> allRecommendationTypes =
        Assembly
            .GetAssembly(typeof(ClientBase))!
            .GetTypes()
            .Where(type =>
                type != typeof(RecommendationRequest)
                && type.IsAssignableTo(typeof(RecommendationRequest))
                && !type.IsGenericType
                && !type.IsAbstract)
            .Append(typeof(ProductRecommendationRequestCollection))
            .Append(typeof(ContentRecommendationRequestCollection))
            .ToList();

    private static List<Type> uncategorizedTypes =
        allRecommendationTypes
            .Where(t => !RecommendationGroupings.SelectMany(m => m.Value).Contains(t))
            .ToList();

    private Task Search()
    {
        var sw = Stopwatch.StartNew();

        groupings = RecommendationGroupings.ToDictionary(
            kvp => kvp.Key,
            kvp => kvp.Value
                .Where(ContainsSearch)
                .ToList()
        );

        if (SearchTerm is "")
        {
            searchTime = null;
        }
        else
        {
            searchTime = sw.Elapsed.TotalMilliseconds;
        }
        return Task.CompletedTask;
    }

    private Dictionary<Type, string> typeNames = new();

    private bool ContainsSearch(Type type)
    {
        if(!typeNames.TryGetValue(type, out string? typeName))
        {
            typeName = type.Name;
            typeNames[type] = typeName;
        }
        return typeName.Contains(SearchTerm.Replace(" ", ""), StringComparison.OrdinalIgnoreCase);
    }

    public void Dispose()
    {
        StaticDatasetStorage.AuthenticationReceived -= Authenticated;
    }
}