@page "/RequestExplorer"
@using Relewise.BlazorApps.TypeEditors
@using System.Reflection
@using System.Diagnostics
@using Newtonsoft.Json
@using Newtonsoft.Json.Converters
@using global::Relewise.Client.Requests
@using global::Relewise.Client.Requests.Recommendations
@using global::Relewise.Client.Requests.Search
@using global::Relewise.Client.Responses
@using Relewise.BlazorApps.Shared

<PageTitle>Blazor Relewise - Request Explorer</PageTitle>

<h1>Request Explorer</h1>
<p>Here you can paste a request (or a merchandising rule) and get a view of the associated object.</p>

@if (error is not null)
{
    <code>@error</code>
    <br />
    <br />
}
else if (message is not null)
{
    <span style="color:green;">@message</span>
    <br />
    <br />
}
<textarea class="form-control" style="height:150px;width:100%;" @bind=input></textarea>
<br />

<button class="btn btn-success" @onclick="() => TryParse()">Try Parse</button> <i> - or - </i>
<button class="btn btn-success" @onclick="() => ParseAsSelectedType()">Parse as specific type</button>
<select @onchange=TypeDropdownChanged>
    @foreach (Type type in derivedTypes)
    {
        if (type == selectedParseType)
        {
            <option value="@type.Name" selected>@type.Name</option>
        }
        else
        {
            <option value="@type.Name">@type.Name</option>
        }
    }
</select>

<br />
<br />

<div style="display:flex;flex-direction:column;grid-gap:5px;">
    @if (hasLastRequestBeenSavedPreviously)
    {
        <div>
            <button @onclick="RetrieveFromLocalStorage" class="btn btn-primary btn-sm">Recall last edited request</button>
        </div>
    }
    @if (Recommendations.RecommendationGroupings.SelectMany(g => g.Value).Contains(inputObject?.GetType()))
    {
        <div>
            <button class="btn btn-primary btn-sm" @onclick="() => TransferToRecommendationsPage()">Transfer to Recommendations page</button>
        </div>
    }
    @if (Searches.SearchRequestGroupings.SelectMany(g => g.Value).Contains(inputObject?.GetType()))
    {
        <div>
            <button class="btn btn-primary btn-sm" @onclick="() => TransferToSearchesPage()">Transfer to Searches page</button>
        </div>
    }
    @if (merchandisingRules.Contains(inputObject?.GetType()))
    {
        <div>
            <button class="btn btn-primary btn-sm" @onclick="() => TransferToMerchandisingRulesPage()">Transfer to Merchandising Rules page</button>
        </div>
    }
</div>

@if (inputObject is not null)
{
    <label for="readonly">Disable edit: </label>
    <input id="readonly" type="checkbox" @bind=readOnly @bind:event="oninput" />
    <br />
    <label for="hideDefaultValueProperties">Hide default values: </label>
    <input id="hideDefaultValueProperties" type="checkbox" @bind=hideDefaultValueProperties @bind:event="oninput" />
    <br />
    <label for="openDetails">Expand all: </label>
    <input id="openDetails" type="checkbox" @bind=openDetails @bind:event="oninput" />
    <br />
    <ObjectEditor OverridenHideDefaultValueProperties=hideDefaultValueProperties
                  OpenDetails=openDetails
                  SingleLevelOpenDetails=true
                  ReadOnly=readOnly
                  T=LicensedRequest
                  ShowModelShareLink=@(Models.ConcreteTypes.Contains(inputObject?.GetType()))
                  Value="inputObject"
                  Setter="(Object? obj) => { inputObject = (LicensedRequest?)obj; SaveInLocalStorage(JSRuntime, obj); StateHasChanged(); }" />
    <br />
    <Troubleshooter Request="inputObject" />
    <br />
}