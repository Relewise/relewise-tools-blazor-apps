@using KristofferStrube.Blazor.Relewise.TypeEditors
@using System.Reflection
@using KristofferStrube.Blazor.Relewise.WasmExample.Extensions
@using global::Relewise.Client.Requests
@using global::Relewise.Client.Requests.Recommendations
@using global::Relewise.Client.Responses
@using global::Relewise.Client.DataTypes

<details class="box">
    <summary @onclick=Instantiate>
        @if (advancedRecommendations.Contains(RequestType.Name))
        {
            <svg class="bi" width="20" height="20" style="margin-top:-5px;margin-right:5px;" viewBox="0 0 16 16">
                <polygon fill="yellow" points="0,6 6,6 8,0 10,6 16,6 11,10 13,16 8,12 3,16 5,10">
                    <title>This is an advanced recommendation that costs more than the other types of recommendations.</title>
                </polygon>
            </svg>
        }
        @(NormalName(RequestType))
        </summary>
    <div style="margin:5px;">
        <h3>Request</h3>
        <ObjectEditor OpenDetails=true T=LicensedRequest Value="request" Setter="(object? obj) => { request = (LicensedRequest?)obj; }" />
        <br />
        @if (Recommender is null)
        {
            <button class="btn btn-success" disabled="true" @onclick="() => Post()">Post</button>
            <i>You have to connect before you can post a request.</i>
        }
        else
        {
            <button class="btn btn-success" @onclick="() => Post()">Post</button>
        }
        <br />
        @if (error is not null)
        {
            <code>@error</code>
        }
        else if (message is not null)
        {
            <span style="color:green;">@message</span>
        }
        @if (response is not null)
        {
            <br />
            <br />
            <h3>Response</h3>
            <ObjectEditor OpenDetails=true ReadOnly=true T=RecommendationResponse Value="response" Setter="(object? obj) => { response = (RecommendationResponse?)obj; }" />
        }
    </div>
</details>


@code {
    private List<string> advancedRecommendations = ["SimilarProductsRequest"];
    private string? message;
    private string? error;
    private LicensedRequest? request;
    private TimedResponse? response;

    [Parameter, EditorRequired]
    public required Recommender Recommender { get; set; }

    [Parameter, EditorRequired]
    public required Func<bool> Connect { get; set; }

    [Parameter, EditorRequired]
    public required Type RequestType { get; set; }

    private void Instantiate()
    {
        if (request is not null) return;
        request = (LicensedRequest)Activator.CreateInstance(RequestType)!;
    }

    private string NormalName(Type type)
    {
        var separated = type.SpaceSeparatedName();
        if (separated.EndsWith("Request"))
        {
            separated = separated[..^8];
        }
        return separated;
    }

    private async Task Post()
    {
        if (!Connect()) return;

        if (request is null)
        {
            message = null;
            error = "Request was null.";
            return;
        }

        try
        {
            var method = typeof(Recommender)
                .GetMethods()
                .Single(m => m.Name is "RecommendAsync" && m.GetParameters() is [var requestParam, var tokenParam] && requestParam.ParameterType == request.GetType());

            var responseTask = (Task<TimedResponse>)this.GetType().GetMethod(nameof(Post))!.MakeGenericMethod(method.ReturnType.GetGenericArguments().Single()).Invoke(null, [method, Recommender, request])!;

            response = await responseTask;
            message = "Successfully recommended.";
            error = null;
        }
        catch (Exception ex)
        {
            error = ex.Message;
            message = null;
        }
    }

    public static async Task<TimedResponse> Post<T>(MethodInfo method, Recommender recommender, LicensedRequest request) where T : TimedResponse
    {
        var taskResponse = (Task<T>)method.Invoke(recommender, [request, CancellationToken.None])!;
        return await taskResponse;
    }
}
