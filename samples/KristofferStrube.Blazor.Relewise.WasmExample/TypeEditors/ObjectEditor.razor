@using System.Reflection
@using Humanizer
@using KristofferStrube.Blazor.Relewise.XmlSummaries
@using Microsoft.JSInterop
@using Newtonsoft.Json
@using Newtonsoft.Json.Converters
@using System.IO.Compression
@using global::Relewise.Client
@using KristofferStrube.Blazor.Popper
@typeparam T

<CascadingValue Value="HideDefaultValueProperties">
    @if (Value is null)
    {
        <div>
            <code>&lt;NULL&gt;</code>
            @if (!ReadOnly)
            {
                <text>&nbsp;</text>
                @if (derivedTypes.Count is 0)
                {
                    <button class="btn btn-outline-success btn-sm" @onclick=Create>Create new @Settings.Name(typeof(T))</button>
                }
                else
                {
                    <select @onchange=TypeDropdownChanged>
                        @foreach (Type type in derivedTypes)
                        {
                            string title = xmlDocumentation is not null && xmlDocumentation.GetSummary(type) is { } summary ? summary : "";
                            if (type == selectedCreateType)
                            {
                                <option title="@title" value="@type.Name" selected>@type.Name</option>
                            }
                            else
                            {
                                <option title="@title" value="@type.Name">@type.Name</option>
                            }
                        }
                    </select>
                    <button class="btn btn-outline-success btn-sm" style="margin:2px;margin-top:0px;padding:1px;line-height:1.1" @onclick=Create>Create</button>
                }
            }
        </div>
    }
    else
    {
        bool unsupportedValue = Value is not null
        && Settings.TypeInheritanceSupported.FirstOrDefault(l =>
        Value.GetType().IsAssignableTo(l.BaseType)
        && AncestorTypes.Any(a => l.AncestorInterfaces.Any(ai => a.IsAssignableTo(ai)))
        ) is { } supportedTypeLimit
        && !supportedTypeLimit.TypeInhertianceLimit.Any(l => Value.GetType().IsAssignableTo(l));

        bool ignoredValue = Value is not null
        && Settings.TypeInheritanceNotIgnored.FirstOrDefault(l =>
        Value.GetType().IsAssignableTo(l.BaseType)
        && AncestorTypes.Any(a => l.AncestorInterfaces.Any(ai => a.IsAssignableTo(ai)))
        ) is { } ignoredTypeLimit
        && !ignoredTypeLimit.TypeInhertianceLimit.Any(l => Value.GetType().IsAssignableTo(l));

        <details class="box @((unsupportedValue || ignoredValue) ? "box-invalid" : "")" open=@(OpenDetails || SingleLevelOpenDetails)>
            <summary class="@((unsupportedValue || ignoredValue) ? "summary-invalid" : "")" @onclick="() => hasBeenOpen = true">
                @if (Value is not null && derivedTypes.Count > 0 && !ReadOnly && hasBeenOpen)
                {
                    <select @onchange=TypeDropdownChanged>
                        @foreach (Type type in derivedTypes)
                        {
                            string title = xmlDocumentation is not null && xmlDocumentation.GetSummary(type) is { } summary ? summary : "";
                            if (type == selectedCreateType)
                            {
                                <option title="@title" value="@type.Name" selected>@type.Name</option>
                            }
                            else
                            {
                                <option title="@title" value="@type.Name">@type.Name</option>
                            }
                        }
                    </select>
                    <button class="btn btn-light btn-sm" style="margin:2px;margin-top:0px;padding:1px;line-height:1.1" @onclick=Create>Switch type</button>
                    if (unsupportedValue)
                    {
                        <small><i>&nbsp;(the type <code>@Settings.Name(Value.GetType())</code> is not valid in this context and it will make the request fail)</i></small>
                    }
                    else if (ignoredValue)
                    {
                        <small><i>&nbsp;(the type <code>@Settings.Name(Value.GetType())</code> is not valid in this context so it will be ignored)</i></small>
                    }
                }
                else
                {
                    <i>
                        @Settings.Name(Value is not null ? Value.GetType() : typeof(T))
                    </i>
                    @if (Value is not null
                   && Properties?.FirstOrDefault(p => p.Name == "Id") is { } idProperty
                   && idProperty.GetValue(Value) is string { } idValue)
                    {
                        <text>
                            &nbsp;<u>@idValue</u>
                        </text>
                    }
                    if (unsupportedValue)
                    {
                        <small><i>&nbsp;(the type is not valid in this context and it will make the request fail)</i></small>
                    }
                    else if (ignoredValue)
                    {
                        <small><i>&nbsp;(the type is not valid in this context so it will be ignored)</i></small>
                    }
                    @if (Value is not null && xmlDocumentation is not null && xmlDocumentation.GetSummary(Value.GetType()) is { } summary)
                    {
                        <TrustedInfo>@summary</TrustedInfo>
                    }
                    else if (Value is not null && communityDocumentation is not null && communityDocumentation.GetSummary(Value.GetType()) is { } communitySummary)
                    {
                        <CommunityInfo Summary="@communitySummary"></CommunityInfo>
                    }
                }
                @if (ShowModelShareLink)
                {
                    <span style="float:right;margin-top:-2px;margin-right:4px;" @onclick:preventDefault=true @onclick="() => CopyLinkToClipboard()">
                        <svg class="bi" width="16" height="16" viewBox="-1 -1 10 10">
                            <polygon fill="transparent" stroke="white" stroke-width="1" points="0,6 2,4 4,4 4,2 6,0 8,0 8,2 6,4 4,4 4,6 2,8 0,8">
                                <title>Copy link to Model page with this object data</title>
                            </polygon>
                        </svg>
                    </span>
                }
                <span style="float:right;margin-top:-2px;margin-right:4px;" @onclick:preventDefault=true @onclick="() => CopyToClipboard()">
                    <svg class="bi" width="16" height="16" viewBox="-1 -1 10 13">
                        <polygon fill="transparent" stroke="white" stroke-width="2" points="0,12 0,2 1,1 3,1 4,0 5,0 6,1 8,1 9,2 9,12">
                            <title>Copy to clipboard as JSON</title>
                        </polygon>
                    </svg>
                </span>
                <span title="@(HideDefaultValueProperties is not true ? "Hide properties that have default values" : "Show all properties")" style="float:right;margin-top:-2px;margin-right:4px;" @onclick:preventDefault=true @onclick="() => HideDefaultValueProperties = HideDefaultValueProperties is not true">
                    @if (HideDefaultValueProperties is not true)
                    {
                        <svg class="bi" width="16" height="16" viewBox="-2 -2 12 3"><polygon stroke="white" stroke-width="2" points="0,0 10,0 10,1 0,1"></polygon></svg>
                    }
                    else
                    {
                        <svg class="bi" width="16" height="16" viewBox="-2 -2 15 15"><polygon stroke="white" stroke-width="2" points="5,5 5,0 6,0 6,5 11,5 11,6 6,6 6,11 5,11 5,6 0,6 0,5"></polygon></svg>
                    }
                </span>
            </summary>
            @if (hasBeenOpen)
            {
                <div class="two-column-grid">
                    @foreach (var property in Properties)
                    {
                        PropertyInvalidContext? invalidProperty = Settings.InvalidProperties.FirstOrDefault(pic =>
                        property == pic.Property
                        && AncestorTypes.Any(a => pic.AncestorInterfaces.Any(ai => a.IsAssignableTo(ai)))
                        );

                        string propertyColor = invalidProperty is not null ? "grey" : "black";

                        if (HideDefaultValueProperties is not true || (Value is null && emptyInstanceOfValue is null) || (Value is not null && emptyInstanceOfValue is not null && (JsonConvert.SerializeObject(property.GetValue(Value)) != JsonConvert.SerializeObject(property.GetValue(emptyInstanceOfValue)) && invalidProperty is null)))
                        {
                            <div @key=@($"{property.Name}-label")>
                                @if (property.GetCustomAttribute<ObsoleteAttribute>() is ObsoleteAttribute { Message: { } obsoleteReason })
                                {
                                    <s><b style="color: @propertyColor">@property.Name</b></s>
                                    <TrustedInfo>@obsoleteReason</TrustedInfo>
                                }
                                else
                                {
                                    <b style="color: @propertyColor">@property.Name</b>
                                    @if (xmlDocumentation is not null && xmlDocumentation.GetSummary(property.DeclaringType, property.Name) is { } summary)
                                    {
                                        <TrustedInfo>@summary</TrustedInfo>
                                    }
                                    else if (communityDocumentation is not null && communityDocumentation.GetSummary(property.DeclaringType, property.Name) is { } communitySummary)
                                    {
                                        <CommunityInfo Summary="@communitySummary"></CommunityInfo>
                                    }
                                }
                                @if (invalidProperty is not null)
                                {
                                    <Info Warning="true">@invalidProperty.Reason</Info>
                                }
                            </div>
                            var potentialEditor = Settings.Editors.FirstOrDefault(editor => editor.CanHandle(property.PropertyType));
                            <div @key=@($"{property.Name}-value") class="object-value">
                                @if (potentialEditor is { } editor)
                                {
                                    var parameters = new Dictionary<string, object>()
                                    {
                                        ["ReadOnly"] = ReadOnly,
                                        ["OpenDetails"] = OpenDetails,
                                        ["Value"] = property.GetValue(Value),
                                        ["Setter"] = (object? obj) => { property.SetValue(Value, obj); Setter(Value); },
                                        ["AncestorTypes"] = (Type[])[.. AncestorTypes, Value?.GetType() ?? typeof(T)]
                                    };
                                    var editorType = editor.EditorType(property.PropertyType);
                                    <ErrorBoundary>
                                        <ChildContent>
                                            <DynamicComponent Type=editorType Parameters=parameters />
                                        </ChildContent>
                                        <ErrorContent>
                                            <code>Failed to initialize editor part for @Settings.Name(property.PropertyType)</code>
                                        </ErrorContent>
                                    </ErrorBoundary>
                                    @if (property.Name.Contains("Minutes") && property.PropertyType == typeof(int) && property.GetValue(Value) is int { } minutes)
                                    {
                                        <TrustedInfo>@TimeSpan.FromMinutes(minutes).Humanize(4)</TrustedInfo>
                                    }
                                    @if (!ReadOnly && property.GetValue(Value) != null && potentialEditor.EditorType(property.PropertyType).IsConstructedGenericType && potentialEditor.EditorType(property.PropertyType).GetGenericTypeDefinition() == typeof(ObjectEditor<>))
                                    {
                                        <button class="btn btn-sm btn-warning" style="padding-top:0;padding-bottom:0;" @onclick="() => RemoveProperty(property)">X</button>
                                    }
                                }
                                else
                                {
                                    <code>Can't edit @Settings.Name(property.PropertyType)</code>
                                }
                            </div>
                        }
                    }
                </div>
            }
        </details>
    }
</CascadingValue>

