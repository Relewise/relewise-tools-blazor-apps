@page "/RequestExplorer"
@using KristofferStrube.Blazor.Relewise.TypeEditors
@using System.Reflection
@using System.Diagnostics
@using Newtonsoft.Json
@using Newtonsoft.Json.Converters
@using global::Relewise.Client.Requests
@using global::Relewise.Client.Requests.Recommendations
@using global::Relewise.Client.Responses

<PageTitle>Blazor Relewise - Request Explorer</PageTitle>

<h1>Request Explorer</h1>
<p>Here you can paste a request and get a view of the associated request type.</p>

@if (error is not null)
{
    <code>@error</code>
    <br />
    <br />
}
else if (message is not null)
{
    <span style="color:green;">@message</span>
    <br />
    <br />
}
<textarea class="form-control" style="height:150px;width:100%;" @bind=input></textarea>
<br />

<button class="btn btn-success" @onclick="() => TryParse()">Try Parse</button> <i> - or - </i>
<button class="btn btn-success" @onclick="() => ParseAsSelectedType()">Parse as specific type</button>
<select @onchange=TypeDropdownChanged>
    @foreach (Type type in derivedTypes)
    {
        if (type == selectedParseType)
        {
            <option value="@type.Name" selected>@type.Name</option>
        }
        else
        {
            <option value="@type.Name">@type.Name</option>
        }
    }
</select>
<br />
<br />
@if (Recommendations.RecommendationGroupings.SelectMany(g => g.Value).Contains(request?.GetType()))
{
    <button class="btn btn-primary btn-sm" @onclick="() => TransferToRecommendationsPage()">Transfer to Recommendations page</button>
    <br />
}
@if (Searches.SearchRequestGroupings.SelectMany(g => g.Value).Contains(request?.GetType()))
{
    <button class="btn btn-primary btn-sm" @onclick="() => TransferToSearchesPage()">Transfer to Searches page</button>
    <br />
}

<label for="readonly">Disable edit: </label>
<input id="readonly" type="checkbox" @bind=ReadOnly @bind:event="oninput" />
<label for="readonly">Hide default values: </label>
<input id="readonly" type="checkbox" @bind=hideDefaultValueProperties @bind:event="oninput" />
<br />

@if (request is not null)
{
    <ObjectEditor OverridenHideDefaultValueProperties=hideDefaultValueProperties OpenDetails=true ReadOnly=ReadOnly T=LicensedRequest ShowModelShareLink=@(Models.Types.Contains(request?.GetType())) Value="request" Setter="(Object? obj) => request = (LicensedRequest?)obj" />
    <br />
}

