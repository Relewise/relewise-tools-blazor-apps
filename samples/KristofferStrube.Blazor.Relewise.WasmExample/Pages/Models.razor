@page "/Models"
@using KristofferStrube.Blazor.Relewise.TypeEditors
@using System.Reflection
@using System.Diagnostics
@using System.IO.Compression
@using KristofferStrube.DocumentSearching
@using KristofferStrube.DocumentSearching.SuffixTree
@using Newtonsoft.Json
@using Newtonsoft.Json.Converters
@using global::Relewise.Client.Requests
@using global::Relewise.Client.Requests.Filters
@using global::Relewise.Client.Requests.Recommendations
@using global::Relewise.Client.Responses
@implements IDisposable
@inject NavigationManager NavigationManager

<PageTitle>Blazor Relewise - Models</PageTitle>

<h1>Models</h1>
<p>
    Here you can see all models and explore the many ways that you configure and use them together.
</p>

<div class="input-group">
    <input @bind=SearchTerm @bind:after=Search id="search" @bind:event="oninput" class="form-control" placeholder="Search" />
    <div class="input-group-append">
        <label for="search" class="input-group-text" style="width:240px;">
            <svg class="bi" width="24" height="24" viewBox="-2 -2 14 13"><polygon fill="transparent" stroke="grey" stroke-width="1" points="12,11 6,6 5,7 2,7 0,5 0,2 2,0 5,0 7,2 7,5 6,6"></polygon></svg>
            @if (searchTime is not null)
            {
                <small style="color: green;margin-left:10px;">
                    Found @filteredTypes.Count() results in @Math.Round(searchTime.Value, 2) ms
                </small>
            }
        </label>
    </div>
</div>

<div style="@(SearchTerm is "" ? "min-height:100vh;" : "")">
    @if (corrections.Length is not 0)
    {
        <div>
            <small>
                <span>query corrections </span>
                @foreach (string correction in corrections)
                {
                    <text> — </text>
                    <u style="color:#00A; cursor: pointer;" @onclick=@(() => { SearchTerm = correction; UpdateSearchQueryString(replace: false); })>@correction</u>
                }
            </small>
        </div>
    }
    @if (continuations.Length is not 0)
    {
        <div>
            <small>
                <span>query continuations </span>
                @foreach (string continuation in continuations)
                {
                    <text> — </text>
                    <u style="color:#00A; cursor: pointer;" @onclick=@(() => { SearchTerm = continuation; UpdateSearchQueryString(replace: false); })>@continuation</u>
                }
            </small>
        </div>
    }
    <br />
    @foreach (var type in SearchResults)
    {
        @if (type.IsInterface || type.IsAbstract)
        {
            <AbstractTypePresenter Type=type />
        }
        else if (Settings.Editors.FirstOrDefault(editor => editor.CanHandle(type)) is { } editor)
        {
            if (editor.InitValue(type) is { } initValue && initValues[type] is null)
            {
                initValues[type] = initValue;
            }
            var parameters = new Dictionary<string, object?>() { ["Value"] = initValues[type], ["Setter"] = (object? obj) => { initValues[type] = obj; StateHasChanged(); } };
            var editorType = editor.EditorType(type);
            if (searchTime is not null && filteredTypes.Count is 1 || type == singleExactMatch)
            {
                parameters.Add("OpenDetails", true);
            }
            if (editorType.IsConstructedGenericType && editorType.GetGenericTypeDefinition() == typeof(ObjectEditor<>))
            {
                parameters.Add("ShowModelShareLink", true);
            }

            <ErrorBoundary>
                <ChildContent>
                    <DynamicComponent Type=editor.EditorType(type) Parameters=parameters />
                </ChildContent>
                <ErrorContent>
                    <code>Failed for @Settings.Name(type)</code>
                </ErrorContent>
            </ErrorBoundary>
        }
        <br />
    }
</div>

<br />

@code {
    private bool disposed = false;
    private CancellationTokenSource? cts;
    private double? searchTime;
    private Dictionary<Type, object?> initValues = default!;

    private DocumentIndex<Type, SuffixTrieSearchIndex> concreteTypesSearchIndex = default!;
    private DocumentIndex<Type, SuffixTrieSearchIndex> abstractTypesSearchIndex = default!;

    private string[] corrections = [];
    private string[] continuations = [];
    private List<Type> filteredTypes = [];
    private List<Type> filteredAbstractTypes = [];
    private Type? singleExactMatch = null;

    public IEnumerable<Type> SearchResults => singleExactMatch is null ? filteredTypes : filteredTypes.Where(t => t != singleExactMatch).Prepend(singleExactMatch);

    [SupplyParameterFromQuery(Name = "q")]
    public string SearchTerm { get; set; } = "";
    private string searchTermDiff = "";

    [SupplyParameterFromQuery(Name = "o")]
    public string? CompressedObject { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (SearchTerm is null)
        {
            SearchTerm = "";
        }

        initValues = ConcreteTypes
            .ToDictionary(
                keySelector: t => t,
                elementSelector: t => t.GetConstructors().FirstOrDefault(c => c.GetParameters().Length is 0)?.Invoke(null)
            );

        concreteTypesSearchIndex = DocumentIndex<Type, SuffixTrieSearchIndex>.Create(ConcreteTypes.ToArray(), t => Settings.Name(t).ToLower());
        abstractTypesSearchIndex = DocumentIndex<Type, SuffixTrieSearchIndex>.Create(AbstractTypes.ToArray(), t => Settings.Name(t).ToLower());

        await Search();

        if (CompressedObject is not null)
        {
            String decompressedString = await FromGzipAsync(CompressedObject.Replace(" ", "+"));
            var jsonSerializerSettings = new JsonSerializerSettings
                {
                    TypeNameHandling = TypeNameHandling.Auto,
                    NullValueHandling = NullValueHandling.Ignore,
                    Formatting = Formatting.None,
                    Converters = [new StringEnumConverter()]
                };
            object? decompressedObject = JsonConvert.DeserializeObject(decompressedString, jsonSerializerSettings);
            if (SearchResults.FirstOrDefault()?.Name == decompressedObject?.GetType().Name)
            {
                initValues[SearchResults.First()] = decompressedObject;
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (SearchTerm is null)
        {
            SearchTerm = "";
            searchTermDiff = SearchTerm;
        }

        if (searchTermDiff != SearchTerm)
        {
            searchTermDiff = SearchTerm;
            await Search();
        }
    }

    public static List<Type> AssemblyTypes = Assembly
        .GetAssembly(typeof(ClientBase))!
            .GetTypes()
            .ToList();

    public static List<Type> ConcreteTypes = GetConcreteTypes(AssemblyTypes);

    public static List<Type> GetConcreteTypes(IEnumerable<Type> input) => input
        .Where(t => !t.IsGenericType && !t.IsAbstract && !t.IsInterface && !t.IsEnum && (t.IsClass || t.IsValueType) && t.IsVisible && Settings.CanCreateNoneNullInitValue(t))
        .OrderBy(t => Settings.Name(t).ToLower().Trim())
        .ToList();

    public static List<Type> GetEnumTypes(IEnumerable<Type> input) => input
        .Where(t => t.IsEnum)
        .OrderBy(t => Settings.Name(t).ToLower().Trim())
        .ToList();

    public static List<Type> AbstractTypes = AssemblyTypes
            .Where(t =>
                !t.IsGenericType
                && t.DeclaringType is null
                && (t.IsAbstract || t.IsInterface))
            .OrderBy(t => Settings.Name(t).ToLower().Trim())
            .ToList();

    private static Dictionary<Type, Type> EditorTypes = ConcreteTypes
        .ToDictionary(
            keySelector: t => t,
            elementSelector: t => typeof(ObjectEditor<>).MakeGenericType(new Type[] { t })
        );

    private async Task Search()
    {
        UpdateSearchQueryString();
        cts?.Cancel();
        var localCts = new CancellationTokenSource();
        var cancellationToken = localCts.Token;
        cts = localCts;
        searchTime = null;
        singleExactMatch = null;
        filteredTypes.Clear();

        var sw = Stopwatch.StartNew();

        Type[] concreteResults;
        Type[] abstractResults;

        var searchTermLower = SearchTerm.ToLower();
        var searchTermLowerSplit = SearchTerm.ToLower().Trim().Split(" ").Select(p => p.Trim()).ToArray();

        if (SearchTerm is "")
        {
            concreteResults = ConcreteTypes.ToArray();
            abstractResults = AbstractTypes.ToArray();
        }
        else
        {
            var concreteSearchIndexMatches = concreteTypesSearchIndex.ApproximateSearch(searchTermLower, 2);
            var abstractSearchIndexMatches = abstractTypesSearchIndex.ApproximateSearch(searchTermLower, 2);

            Dictionary<string, int> correctionSet = new();

            int[] encodedInput = concreteTypesSearchIndex.SearchIndex.Input;
            foreach (var result in concreteSearchIndexMatches)
            {
                foreach (var match in result.Matches.Where(m => m.Edits >= 1 && m.ExpandedCigar.First() is EditType.Match or EditType.MisMatch))
                {
                    string typeName = Settings.Name(result.Element);
                    string constructedString = typeName[match.Position..Math.Min(match.Position + match.Length, typeName.Length)].ToLower();

                    if (constructedString.Contains(".") || constructedString.Length < 2 || searchTermLowerSplit.Contains(constructedString))
                        continue;

                    correctionSet.TryGetValue(constructedString, out int count);
                    correctionSet[constructedString] = count + 1;
                }
            }
            corrections = correctionSet.OrderByDescending(kvp => kvp.Value).Select(kvp => kvp.Key).Take(5).ToArray();

            concreteResults = concreteSearchIndexMatches.Select(sr => sr.Element).ToArray();
            continuations = concreteTypesSearchIndex.ContinuationsSortedByOccurrences(searchTermLower, [' '], 5, mustBeAfterBreakChar: true);
            abstractResults = abstractSearchIndexMatches.Select(sr => sr.Element).ToArray();
        }
        singleExactMatch = concreteResults.Concat(abstractResults).FirstOrDefault(e => Settings.Name(e).ToLower() == searchTermLower);

        if (concreteResults.Length > 10)
        {
            foreach (var chunk in concreteResults.Concat(abstractResults).Chunk(10))
            {
                filteredTypes.AddRange(chunk);
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1);
                if (localCts.IsCancellationRequested)
                {
                    return;
                }
            }
        }
        else
        {
            filteredTypes = concreteResults.Concat(abstractResults).ToList();
        }

        if (SearchTerm is "")
        {
            searchTime = null;
        }
        else
        {
            searchTime = sw.Elapsed.TotalMilliseconds;
        }
    }

    private void UpdateSearchQueryString(bool replace = true)
    {
        Dictionary<string, object?> queryStrings = new Dictionary<string, object?>()
        {
            { "q", SearchTerm is "" ? null : SearchTerm }
        };

        if (CompressedObject is not null)
            queryStrings.Add("o", CompressedObject);

        string url = NavigationManager.GetUriWithQueryParameters(queryStrings);

        if (!SearchTerm.EndsWith(" "))
        {
            NavigationManager.NavigateTo(url, replace: replace);
        }
    }

    public static async Task<string> FromGzipAsync(string value)
    {
        var bytes = Convert.FromBase64String(value);
        await using var input = new MemoryStream(bytes);
        await using var output = new MemoryStream();
        await using var stream = new GZipStream(input, CompressionMode.Decompress);

        await stream.CopyToAsync(output);
        await stream.FlushAsync();

        return System.Text.Encoding.UTF8.GetString(output.ToArray());
    }

    public void Dispose()
    {
        disposed = true;
    }
}