@page "/Models"
@using KristofferStrube.Blazor.Relewise.TypeEditors
@using System.Reflection
@using System.Diagnostics
@using System.IO.Compression
@using KristofferStrube.DocumentSearching
@using KristofferStrube.DocumentSearching.SuffixTree
@using Newtonsoft.Json
@using Newtonsoft.Json.Converters
@using global::Relewise.Client.Requests
@using global::Relewise.Client.Requests.Recommendations
@using global::Relewise.Client.Responses
@implements IDisposable
@inject NavigationManager NavigationManager

<PageTitle>Blazor Relewise - Models</PageTitle>

<h1>Models</h1>
<p>
    Here you can see all models and explore the many ways that you configure and use them together.
</p>

<div class="input-group">
    <input @bind=SearchTerm @bind:after=Search id="search" @bind:event="oninput" class="form-control" placeholder="Search" />
    <div class="input-group-append">
        <label for="search" class="input-group-text" style="width:240px;">
            <svg class="bi" width="24" height="24" viewBox="-2 -2 14 13"><polygon fill="transparent" stroke="grey" stroke-width="1" points="12,11 6,6 5,7 2,7 0,5 0,2 2,0 5,0 7,2 7,5 6,6"></polygon></svg>
            @if (searchTime is not null)
            {
                <small style="color: green;margin-left:10px;">
                    Found @filteredTypes.Count() results in @Math.Round(searchTime.Value, 2) ms
                </small>
            }
        </label>
    </div>
</div>
<br />

<div style="@(SearchTerm is "" ? "min-height:100vh;" : "")">
    @foreach (var type in SearchResults)
    {
        @if (Settings.Editors.FirstOrDefault(editor => editor.CanHandle(type)) is { } editor)
        {
            if (editor.InitValue(type) is { } initValue && initValues[type] is null)
            {
                initValues[type] = initValue;
            }
            var parameters = new Dictionary<string, object?>() { ["Value"] = initValues[type], ["Setter"] = (object? obj) => { } };
            var editorType = editor.EditorType(type);
            if (searchTime is not null && filteredTypes.Count is 1 || type == singleExactMatch)
            {
                parameters.Add("OpenDetails", true);
            }
            if (editorType.IsConstructedGenericType && editorType.GetGenericTypeDefinition() == typeof(ObjectEditor<>))
            {
                parameters.Add("ShowModelShareLink", true);
            }
            <ErrorBoundary>
                <ChildContent>
                    <DynamicComponent Type=editor.EditorType(type) Parameters=parameters />
                </ChildContent>
                <ErrorContent>
                    <code>Failed for @type.Name</code>
                </ErrorContent>
            </ErrorBoundary>
        }
        <br />
    }
</div>

<br />

@code {
    private bool disposed = false;
    private CancellationTokenSource? cts;
    private double? searchTime;
    private Dictionary<Type, object?> initValues = default!;

    private DocumentIndex<Type, SuffixTrieSearchIndex> searchIndex = default!;

    private List<Type> filteredTypes = [];
    private Type? singleExactMatch = null;

    public IEnumerable<Type> SearchResults => singleExactMatch is null ? filteredTypes : filteredTypes.Where(t => t != singleExactMatch).Prepend(singleExactMatch);

    [SupplyParameterFromQuery(Name = "q")]
    public string SearchTerm { get; set; } = "";

    [SupplyParameterFromQuery(Name = "o")]
    public string? CompressedObject { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (SearchTerm is null)
        {
            SearchTerm = "";
        }

        initValues = Types
            .ToDictionary(
                keySelector: t => t,
                elementSelector: t => t.GetConstructors().FirstOrDefault(c => c.GetParameters().Length is 0)?.Invoke(null)
            );

        searchIndex = DocumentIndex<Type, SuffixTrieSearchIndex>.Create(Types.ToArray(), t => t.Name.ToLower());

        await Search();

        if (CompressedObject is not null)
        {
            String decompressedString = await FromGzipAsync(CompressedObject.Replace(" ", "+"));
            var jsonSerializerSettings = new JsonSerializerSettings
                {
                    TypeNameHandling = TypeNameHandling.Auto,
                    NullValueHandling = NullValueHandling.Ignore,
                    Formatting = Formatting.None,
                    Converters = [new StringEnumConverter()]
                };
            object? decompressedObject = JsonConvert.DeserializeObject(decompressedString, jsonSerializerSettings);
            if (SearchResults.FirstOrDefault()?.Name == decompressedObject?.GetType().Name)
            {
                initValues[SearchResults.First()] = decompressedObject;
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (SearchTerm is null)
        {
            SearchTerm = "";
        }
    }

    private static List<Type> AssemblyTypes = Assembly
        .GetAssembly(typeof(ClientBase))!
            .GetTypes()
            .ToList();

    public static List<Type> Types = AssemblyTypes
            .Where(t =>
                !t.IsGenericType
                && t.DeclaringType is null
                && !t.IsAbstract
                && !t.IsInterface
                && !AssemblyTypes.Any(d => d != t && d.IsAssignableTo(t))
                && t.GetConstructors().Any(c => c.GetParameters().Length is 0))
            .OrderBy(t => t.Name.ToLower().Trim())
            .ToList();

    private static Dictionary<Type, Type> EditorTypes = Types
        .ToDictionary(
            keySelector: t => t,
            elementSelector: t => typeof(ObjectEditor<>).MakeGenericType(new Type[] { t })
        );

    private async Task Search()
    {
        UpdateSearchQueryString();
        cts?.Cancel();
        var localCts = new CancellationTokenSource();
        var cancellationToken = localCts.Token;
        cts = localCts;
        searchTime = null;
        singleExactMatch = null;
        filteredTypes.Clear();

        var sw = Stopwatch.StartNew();

        Type[] results;

        if (SearchTerm is "")
        {
            results = Types.ToArray();
        }
        else
        {
            results = searchIndex.ExactSearch(SearchTerm.ToLower()).Select(sr => sr.Element).ToArray();
        }
        singleExactMatch = results.FirstOrDefault(e => e.Name.ToLower() == SearchTerm.ToLower());

        if (results.Length > 10)
        {
            foreach (var chunk in results.Chunk(10))
            {
                filteredTypes.AddRange(chunk);
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1);
                if (localCts.IsCancellationRequested)
                {
                    return;
                }
            }
        }
        else
        {
            filteredTypes = results.ToList();
        }

        if (SearchTerm is "")
        {
            searchTime = null;
        }
        else
        {
            searchTime = sw.Elapsed.TotalMilliseconds;
        }
    }

    private void UpdateSearchQueryString()
    {
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        if (relativePath.Split("?") is { Length: >= 2 } parts)
        {
            relativePath = parts[0];
        }
        if (relativePath.EndsWith("/"))
        {
            relativePath = relativePath[..^1];
        }

        string url = SearchTerm is "" ? relativePath : $"{relativePath}?q={SearchTerm}";

        if (CompressedObject is not null)
        {
            url += $"{(SearchTerm is "" ? "?" : "&")}o=" + CompressedObject;
        }

        NavigationManager.NavigateTo(url, replace: true);
    }

    public static async Task<string> FromGzipAsync(string value)
    {
        var bytes = Convert.FromBase64String(value);
        await using var input = new MemoryStream(bytes);
        await using var output = new MemoryStream();
        await using var stream = new GZipStream(input, CompressionMode.Decompress);

        await stream.CopyToAsync(output);
        await stream.FlushAsync();

        return System.Text.Encoding.UTF8.GetString(output.ToArray());
    }

    public void Dispose()
    {
        disposed = true;
    }
}