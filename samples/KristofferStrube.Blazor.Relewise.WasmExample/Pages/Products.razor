@using KristofferStrube.Blazor.DOM
@using KristofferStrube.Blazor.Relewise.TypeEditors
@using KristofferStrube.Blazor.Window
@page "/Products"
@implements IDisposable

<PageTitle>Blazor Relewise - Products</PageTitle>

<h1>Products</h1>

<p>Here you can get a product using the <code>DataAccessor</code>, then make changes to it, and in the end track the changes with the <code>Tracker</code>. You can likewise enable or disable the selected product.</p>

@if (StaticDatasetStorage.ParentOrigin is null || string.IsNullOrWhiteSpace(StaticDatasetStorage.ApiKey))
{
    <p>
        First you need to insert your Server URL, Dataset Id, and API Key to connect with your dataset. You can find these at <a target="_blank" href="https://my.relewise.com/api-keys">My Relewise > API Keys</a>.
        <br />
        <small>You can't use your Master key in this application so you will have to create some separate key that can use the <code>DataAccessor</code> and the <code>Tracker</code> to use this.</small>
    </p>

    <ConnectionCredentials />
}

@if (error is not null)
{
    <code>@error</code>
    <br />
    <br />
}
@if (message is not null)
{
    <span style="color:green;">@message</span>
    <br />
    <br />
}

@if (dataAccessor is null || tracker is null)
{
    <button class="btn btn-success" @onclick="() => Connect()">Connect</button>
    <br />
}
else
{
    <p>Now you need to find the id of some Product you want to inspect.</p>

    <div class="input-group">
        <div class="input-group-prepend">
            <label for="productId" class="input-group-text" style="width:120px;">Product Id</label>
        </div>
        <input @bind=productId class="form-control" id="productId" />
    </div>
    <br />
    <div style="display:flex;grid-gap:5px;flex-direction:row;">
        <button class="btn btn-primary" @onclick=Fetch>Fetch</button>
        @if (productIsDisabled)
        {
            <button class="btn btn-success" style="width:80px;" @onclick=EnableProduct>Enable</button>
        }
        else
        {
            <button class="btn btn-warning" style="width:80px;" @onclick=DisableProduct>Disable</button>
        }
        @if (product is not null)
        {
            <button class="btn btn-success" @onclick=Update>Update</button>
        }
    </div>
    <br />
}
@if (product is not null)
{
    <label for="openDetails">Expand all: </label>
    <input id="openDetails" type="checkbox" @bind=openDetails @bind:event="oninput" />
    <ObjectEditor OpenDetails=openDetails SingleLevelOpenDetails=true T=Product Value="product" Setter="(Object? obj) => { product = (Product?)obj;  StateHasChanged(); }" />
    <br />
    @if (productVariants is not null)
    {
        <details class="box" open="true">
            <summary>
                Variants
            </summary>
            <div class="two-column-grid">
                @for (int i = 0; i < productVariants.Count; i++)
                {
                    int j = i;
                    @if (productVariantsAreDisabled[i])
                    {
                        <button class="btn btn-success btn-sm" style="width:70px;height:26px;padding:0px;" @onclick="() => EnableVariant(j)">Enable</button>
                    }
                    else
                    {
                        <button class="btn btn-warning btn-sm" style="width:70px;height:26px;padding:0px;" @onclick="() => DisableVariant(j)">Disable</button>
                    }
                    <div>
                        <ObjectEditor OpenDetails=openDetails T=ProductVariant Value="productVariants[j]" Setter="(Object? obj) => { productVariants[j] = (ProductVariant)obj!; variantsHaveChanges = true; StateHasChanged(); }" />
                    </div>
                }
            </div>
        </details>
    }
    <br />
    <br />
}

@code {
    private string? error;
    private string? message;
    private string productId = "";
    private bool openDetails;
    private DataAccessor? dataAccessor;
    private Tracker? tracker;
    private Product? product;
    private bool productIsDisabled;
    private List<ProductVariant>? productVariants;
    private List<bool> productVariantsAreDisabled = new();
    private bool variantsHaveChanges;

    [Inject]
    public required IJSRuntime JSRuntime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (StaticDatasetStorage.DatasetId is not "" && !string.IsNullOrWhiteSpace(StaticDatasetStorage.ApiKey))
        {
            Connect();
        }
        StaticDatasetStorage.AuthenticationReceived += Authenticated;
    }

    private void Authenticated(object? sender, EventArgs args)
    {
        Connect();
        StateHasChanged();
    }

    private bool Connect()
    {
        try
        {
            dataAccessor = new DataAccessor(new Guid(StaticDatasetStorage.DatasetId), StaticDatasetStorage.ApiKey, StaticDatasetStorage.ServerUrl);
            tracker = new Tracker(new Guid(StaticDatasetStorage.DatasetId), StaticDatasetStorage.ApiKey, StaticDatasetStorage.ServerUrl);
            message = "Successfully initialized the DataAccessor and Tracker.";
            error = null;
            return true;
        }
        catch (Exception ex)
        {
            error = ex.Message;
            message = null;
            return false;
        }
    }

    private async Task Fetch()
    {
        if (!Connect()) return;
        try
        {
            var result = await dataAccessor!.QueryAsync(new ProductQuery(productId)
            {
                IncludeDisabledProducts = true,
                IncludeDisabledVariants = true
            });
            var productResult = result?.Products.Single();
            if (productResult is null) return;

            productIsDisabled = productResult.Disabled;
            product = new Product(productResult.ProductId)
                {
                    DisplayName = productResult.DisplayName,
                    Assortments = productResult.Assortments?.ToList(),
                    CategoryPaths = productResult.CategoryPaths
                                                    ?.Select(cp => new CategoryPath() { BreadcrumbPathStartingFromRoot = cp.BreadcrumbPathStartingFromRoot })
                                                    ?.ToList(),
                    Data = productResult.Data,
                    Custom = productResult.Custom,
                    Brand = productResult.Brand is null
                                                ? null
                                                : new Brand(productResult.Brand.BrandId)
                                                {
                                                    DisplayName = productResult.Brand.DisplayName,
                                                    Assortments = productResult.Brand.Assortments?.ToList(),
                                                    Data = productResult.Brand.Data
                                                },
                    ListPrice = productResult.ListPrice,
                    SalesPrice = productResult.SalesPrice
                };

            if (productResult.AllVariants?.Length > 0)
            {
                productVariants = new(productResult.AllVariants.Length);
                productVariantsAreDisabled = new(productResult.AllVariants.Length);

                foreach (VariantResultDetails productVariantResult in productResult.AllVariants)
                {
                    productVariantsAreDisabled.Add(productVariantResult.Disabled);
                    productVariants.Add(new ProductVariant(productVariantResult.VariantId)
                        {
                            DisplayName = productVariantResult.DisplayName,
                            Assortments = productVariantResult.Assortments?.ToList(),
                            Specification = productVariantResult.Specification,
                            Data = productVariantResult.Data,
                            Custom = productVariantResult.Custom,
                            ListPrice = productVariantResult.ListPrice,
                            SalesPrice = productVariantResult.SalesPrice
                        });
                }
            }
            else
            {
                productVariants = null;
            }
            variantsHaveChanges = false;

            message = "Successfully fetched the product";
            error = null;
        }
        catch (Exception ex)
        {
            error = ex.Message;
            message = null;
            dataAccessor = null;
            tracker = null;
            throw;
        }
    }

    private async Task Update()
    {
        try
        {
            if (variantsHaveChanges)
            {
                await tracker!.TrackAsync(
                    new ProductUpdate(
                        product,
                        productVariants,
                        ProductUpdate.UpdateKind.ReplaceProvidedProperties,
                        ProductUpdate.UpdateKind.ReplaceProvidedProperties,
                        replaceExistingVariants: true)
                );
            }
            else
            {
                await tracker!.TrackAsync(new ProductUpdate(product, ProductUpdate.UpdateKind.ReplaceProvidedProperties));
            }
            message = "Successfully updated the product" + (variantsHaveChanges ? " and variants." : ".");
            product = null;
            productVariants = null;
            error = null;
        }
        catch (Exception ex)
        {
            error = ex.Message;
            message = null;
        }
    }

    private async Task EnableProduct()
    {
        if (!Connect()) return;
        StateHasChanged();
        await Task.Delay(100);
        try
        {
            await tracker!.TrackAsync(
                new ProductAdministrativeAction(null, null, productId, ProductAdministrativeAction.UpdateKind.Enable)
            );
            productIsDisabled = false;
            message = "Successfully enabled the product";
            error = null;
        }
        catch (Exception ex)
        {
            error = ex.Message;
            message = null;
        }
    }

    private async Task DisableProduct()
    {
        if (!Connect()) return;
        StateHasChanged();
        await Task.Delay(100);
        try
        {
            await tracker!.TrackAsync(
                new ProductAdministrativeAction(null, null, productId, ProductAdministrativeAction.UpdateKind.Disable)
            );
            productIsDisabled = true;
            message = "Successfully disabled the product";
            error = null;
        }
        catch (Exception ex)
        {
            error = ex.Message;
            message = null;
        }
    }

    private async Task EnableVariant(int variantIndex)
    {
        if (!Connect() || productVariants is null) return;
        StateHasChanged();
        await Task.Delay(100);
        try
        {
            await tracker!.TrackAsync(
                new ProductAdministrativeAction(null, null, productId, ProductAdministrativeAction.UpdateKind.None, productVariants[variantIndex].Id, ProductAdministrativeAction.UpdateKind.Enable)
            );
            productVariantsAreDisabled[variantIndex] = false;
            message = "Successfully enabled the variant";
            error = null;
        }
        catch (Exception ex)
        {
            error = ex.Message;
            message = null;
        }
    }

    private async Task DisableVariant(int variantIndex)
    {
        if (!Connect() || productVariants is null) return;
        StateHasChanged();
        await Task.Delay(100);
        try
        {
            await tracker!.TrackAsync(
                new ProductAdministrativeAction(null, null, productId, ProductAdministrativeAction.UpdateKind.None, productVariants[variantIndex].Id, ProductAdministrativeAction.UpdateKind.Disable)
            );
            productVariantsAreDisabled[variantIndex] = true;
            message = "Successfully disabled the variant";
            error = null;
        }
        catch (Exception ex)
        {
            error = ex.Message;
            message = null;
        }
    }

    public void Dispose()
    {
        StaticDatasetStorage.AuthenticationReceived -= Authenticated;
    }
}
