@page "/DocsStatistics"
@using KristofferStrube.Blazor.Relewise.TypeEditors
@using System.Reflection
@using System.Diagnostics
@using System.IO.Compression
@using KristofferStrube.Blazor.Relewise.XmlSummaries
@using KristofferStrube.DocumentSearching
@using KristofferStrube.DocumentSearching.SuffixTree
@using Newtonsoft.Json
@using Newtonsoft.Json.Converters
@using global::Relewise.Client.Requests
@using global::Relewise.Client.Requests.Filters
@using global::Relewise.Client.Requests.Recommendations
@using global::Relewise.Client.Responses

<PageTitle>Blazor Relewise - Docs Statistics</PageTitle>

<h1>Docs Statistic</h1>
<p>
    Here you can get an overview of how well documented the SDK is.
</p>

@if (calculating)
{
    <h3>We are currently calculating these numbers. Follow below as they get populated...</h3>
}

In the SDK there are defined @summaries summaries for properties, constructors, parameters, classes and interfaces.
<br />

There are @typeCount types and @documentedTypeCount of them are officially documented..
<br />

There are @propertyCount properties and @documentedPropertyCount of them are officially documented.
<br />

<br />

@code {
    private bool calculating = true;
    private int typeCount;
    private int documentedTypeCount;
    private int propertyCount;
    private int documentedPropertyCount;
    private int summaries;

    [Inject]
    public DocumentationCache XMLDocumentationCache { get; set; }

    [Inject]
    public HttpClient HttpClient { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var (documentation, _) = await XMLDocumentationCache.GetAsync(HttpClient);
        foreach (var summary in documentation.Summaries)
        {
            summaries++;
            StateHasChanged();
            await Task.Delay(1);
        }

        foreach (Type type in Models.AssemblyTypes)
        {
            typeCount++;
            if (documentation.GetSummary(type) is not null)
            {
                documentedTypeCount++;
            }
            var properties = type
                .GetProperties()
                .Where(p => p.DeclaringType == type && p.SetMethod is not null && p.GetIndexParameters() is { Length: 0 } && p.Name is not "Custom" and not "DatasetId" and not "APIKeySecret");

            propertyCount += properties.Count();
            documentedPropertyCount += properties.Where(p => documentation.GetSummary(p.DeclaringType, p.Name) is not null).Count();

            StateHasChanged();
            await Task.Delay(1);
        }

        calculating = false;
        StateHasChanged();
    }
}